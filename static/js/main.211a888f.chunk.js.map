{"version":3,"sources":["components/Header.js","components/Contents.js","components/Word.js","App.js","reportWebVitals.js","index.js"],"names":["Header","history","useHistory","className","onChange","e","target","value","push","Loading","Contents","useState","confirmedData","setConfirmedData","quarantinedData","setQuarantinedData","comparedDate","setComparedDate","loading","setloading","useEffect","fetchEvents","a","axios","get","then","res","makeD","data","catch","error","console","log","items","arr","reduce","acc","cur","currentDate","Date","year","getFullYear","month","getMonth","date","getDate","confirmed","Confirmed","active","Active","death","Deaths","recovered","Recovered","findItem","find","labels","map","datasets","label","backgroundColor","fill","borderColor","last","length","options","legend","display","position","Word","totaldate","setTotalDate","newtotaldate","setNewTotalDate","setdate","setdata","newdata","newSetData","makeDate","Global","TotalConfirmed","toString","replace","TotalRecovered","TotalDeaths","NewConfirmed","NewRecovered","NewDeaths","day","dateString","App","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.211a888f.chunk.js","sourcesContent":["import React,{useState, useEffect} from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nconst Header = () => {\r\n  \r\n  let history = useHistory();\r\n\r\n  let path = (e)=>{\r\n   if(e.target.value == '세계'){\r\n     history.push(\"/word\")\r\n   }\r\n   else{\r\n     history.push(\"/\")\r\n   }\r\n  }\r\n\r\n    return (\r\n        \r\n      <header className=\"header\">\r\n      <h1>COVID-19</h1>\r\n      \r\n      <select onChange={path} >\r\n        <option>국내</option>\r\n        <option>세계</option>\r\n      </select>\r\n    </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React,{useState ,useEffect}  from 'react'\r\nimport {Bar, Doughnut, Line} from 'react-chartjs-2'\r\nimport axios from 'axios';\r\nconst Contents = () => {\r\n    \r\n    const [confirmedData, setConfirmedData] = useState({})\r\n    const [quarantinedData, setQuarantinedData] = useState({})\r\n    const [comparedDate, setComparedDate] = useState({});\r\n    const [loading, setloading] = useState(true);\r\n    useEffect(()=>{\r\n        \r\n        setloading(true);\r\n        const fetchEvents = async ()=>{\r\n            // const res = \r\n            await axios.get(\"https://api.covid19api.com/total/dayone/country/kr\")\r\n            .then((res)=>{\r\n                setloading(false)\r\n                makeD(res.data)})\r\n            .catch((error)=>{\r\n                setloading(false)\r\n                console.log(error)})\r\n            \r\n        }\r\n        const makeD = (items)=>{\r\n            const arr = items.reduce((acc, cur)=>{\r\n                const currentDate = new Date(cur.Date);\r\n                const year = currentDate.getFullYear();\r\n                const month = currentDate.getMonth();\r\n                const date = currentDate.getDate();\r\n                const confirmed = cur.Confirmed;\r\n                const active = cur.Active;\r\n                const death = cur.Deaths;\r\n                const recovered = cur.Recovered;\r\n                \r\n                //2번째 실행 처음넣은 변수값 대조(년도, 달)\r\n                const findItem = acc.find(a=> a.year === year && a.month === month)\r\n                \r\n                //1번째 실행 윗 변수값들을 넣는다(같은년도와 달이 없음) \r\n                if(!findItem){\r\n                    acc.push({year, month, date, confirmed, active, death, recovered})\r\n                }\r\n                //3번째 실행 년도 달이 있을시 acc의 date가 더 작으면 cur의 변수값으로 변경(주소값)\r\n                if(findItem && findItem.date < date){\r\n                    findItem.active = active;\r\n                    findItem.death = death;\r\n                    findItem.date = date;\r\n                    findItem.month = month;\r\n                    findItem.recovered = recovered;\r\n                    findItem.confirmed = confirmed;\r\n                }\r\n\r\n                return acc;\r\n            },[])\r\n            const labels = arr.map(a=>`${a.month+1}월`)\r\n            setConfirmedData({\r\n                labels:labels,\r\n                datasets:[\r\n                    {\r\n                        label:\"국내 누적 확진자\",\r\n                        backgroundColor : \"salmon\",\r\n                        fill:true,\r\n                        data:arr.map(a=>a.confirmed)\r\n                    }\r\n                ]\r\n            });\r\n            setQuarantinedData({\r\n                labels:labels,\r\n                datasets:[\r\n                    {\r\n                        label:\"월별 격리자 현황\",\r\n                        borderColor : \"black\",\r\n                        fill:false,\r\n                        data:arr.map(a=>a.active)\r\n                    }\r\n                ]\r\n            });\r\n            const last= arr[arr.length-1];\r\n            setComparedDate({\r\n                labels:[\"확진자\",\"격리해재\",\"사망\"],\r\n                datasets:[\r\n                    {\r\n                        label:\"누적 확진, 해제, 사망 비율\",\r\n                        backgroundColor : [\"#ff3d67\",\"#059bff\",\"#ffc233\"],\r\n                        borderColor :  [\"#ff3d67\",\"#059bff\",\"#ffc233\"],\r\n                        fill:true,\r\n                        data:[last.confirmed, last.recovered, last.death]\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n\r\n        fetchEvents()\r\n    },[])\r\n\r\n    return (\r\n        <section>\r\n        <h2>국내 코로나 현황</h2>\r\n        <div className=\"contents\">\r\n            {\r\n            loading ?\r\n            <Loading></Loading>\r\n            : null\r\n            }\r\n            <div>\r\n                <Bar data={confirmedData} options={\r\n                    {title:{display:true, text:\"누적 확진자 추이\", fontSize:16}},\r\n                    {legend: {display:true, position: \"bottom\"}}\r\n                }></Bar>\r\n            </div>\r\n            <div>\r\n                <Line data={quarantinedData} options={\r\n                    {title:{display:true, text:\"월별 격리자 현황\", fontSize:16}},\r\n                    {legend: {display:true, position: \"bottom\"}}\r\n                }></Line>\r\n            </div>\r\n            <div>\r\n                <Doughnut data={comparedDate} options={\r\n                    {title:{display:true, text:`누적 확진, 해제, 사망 (${new Date().getMonth()+1}월)` , fontSize:16}},\r\n                    {legend: {display:true, position: \"bottom\"}}\r\n                }></Doughnut>\r\n            </div>\r\n        </div>\r\n      </section>\r\n    )\r\n}\r\n\r\nfunction Loading(){\r\n    return(\r\n        <div>\r\n            <h3 className=\"loading\">Loading...</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contents\r\n","import React,{useState, useEffect} from 'react'\r\nimport {Bar, Doughnut, Line} from 'react-chartjs-2'\r\nimport axios from 'axios';\r\nconst Word = () => {\r\n\r\n    const [totaldate, setTotalDate] = useState({})\r\n    const [newtotaldate, setNewTotalDate] = useState({})\r\n    const [date,setdate]=useState(\"\");\r\n    const [data,setdata] = useState([]);\r\n    const [newdata, newSetData]= useState([]);\r\n    const [loading, setloading] = useState(true);\r\n        useEffect(()=>{\r\n\r\n            setloading(true);\r\n        const fetchEvents = async ()=>{\r\n            await axios.get(\"https://api.covid19api.com/summary\")\r\n            .then((data)=>{\r\n                setloading(false)\r\n                makeDate(data.data.Global)\r\n                setdata([data.data.Global.TotalConfirmed.toString().replace(/\\B(?=(\\d{4})+(?!\\d))/g, ','),\r\n                    data.data.Global.TotalRecovered.toString().replace(/\\B(?=(\\d{4})+(?!\\d))/g, ','),\r\n                    data.data.Global.TotalDeaths.toString().replace(/\\B(?=(\\d{4})+(?!\\d))/g, ',')\r\n                ])\r\n                newSetData([data.data.Global.NewConfirmed.toString().replace(/\\B(?=(\\d{4})+(?!\\d))/g, ','),\r\n                    data.data.Global.NewRecovered.toString().replace(/\\B(?=(\\d{4})+(?!\\d))/g, ','),\r\n                    data.data.Global.NewDeaths.toString().replace(/\\B(?=(\\d{4})+(?!\\d))/g, ',')\r\n                ])\r\n            })\r\n            .catch((error)=>{\r\n                setloading(false)\r\n                console.log(error)})\r\n        }\r\n\r\n        const makeDate = (data)=>{\r\n            \r\n            let date = new Date(data.Date);\r\n            let year = date.getFullYear();\r\n            let month = date.getMonth();\r\n            let day = date.getDate();\r\n            let dateString = `${year}년 ${month+1}월 ${day}기준`\r\n            setdate(dateString);\r\n            setTotalDate({\r\n                labels:[\"확진자\",\"격리해재\",\"사망\"],\r\n                datasets:[\r\n                    {\r\n                        label:\"누적 확진, 해제, 사망 비율\",\r\n                        backgroundColor : [\"#ffee00\",\"#059bff\",\"#464646\"],\r\n                        borderColor :  [\"#ffee00\",\"#059bff\",\"#464646\"],\r\n                        fill:true,\r\n                        data:[data.TotalConfirmed,data.TotalRecovered,data.TotalDeaths]\r\n                    }\r\n                ]\r\n            });\r\n            setNewTotalDate({\r\n                labels:[\"확진자\",\"격리해재\",\"사망\"],\r\n                datasets:[\r\n                    {\r\n                        label:\"누적 확진, 해제, 사망 비율\",\r\n                        backgroundColor : [\"#ffee00\",\"#059bff\",\"#464646\"],\r\n                        borderColor :  [\"#ffee00\",\"#059bff\",\"#464646\"],\r\n                        fill:true,\r\n                        data:[data.NewConfirmed,data.NewRecovered,data.NewDeaths]\r\n                    }\r\n                ]\r\n            });\r\n            \r\n        }\r\n        fetchEvents();\r\n        \r\n   \r\n        \r\n    },[])\r\n    \r\n  \r\n  \r\n\r\n    return (\r\n        <section>\r\n\r\n        <div className=\"word\">\r\n        <h2>세계 코로나 현황</h2>\r\n        <h4 className=\"date\">{date}</h4>\r\n        </div>\r\n        {\r\n            loading ?\r\n            <Loading></Loading>\r\n            : null\r\n            }\r\n\r\n        <div className=\"contents\">\r\n            <div>\r\n               <div className=\"message\">\r\n               <p>확진자 : {data[0]}</p>\r\n               <p>격리해제 : {data[1]}</p>\r\n               <p>사망 : {data[2]}</p>\r\n                </div>\r\n                <Doughnut data={totaldate} options={\r\n                    {title:{display:true, text:`누적 확진, 해제, 사망 ` , fontSize:16}},\r\n                    {legend: {display:true, position: \"bottom\"}}\r\n                }></Doughnut>\r\n            </div>\r\n\r\n            <div>\r\n            <h4>신규 확진자, 격리해제, 사망 </h4>\r\n            <div className=\"message\">\r\n            <p>확진자 : {newdata[0]}</p>\r\n            <p>격리해제 : {newdata[1]}</p>\r\n            <p>사망 : {newdata[2]}</p>\r\n            </div>\r\n                <Doughnut data={newtotaldate} options={\r\n                    {title:{display:true, text:`누적 확진, 해제, 사망 ` , fontSize:16}},\r\n                    {legend: {display:true, position: \"bottom\"}}\r\n                }></Doughnut>\r\n            </div>\r\n        </div>\r\n        \r\n      </section>\r\n    )\r\n}\r\nfunction Loading(){\r\n    return(\r\n        <div>\r\n            <h3 className=\"loading\">Loading...</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Word\r\n","\nimport './App.css';\nimport Header from './components/Header'\nimport Contents from './components/Contents'\nimport Word from './components/Word';\nimport { Link, Route, Switch } from 'react-router-dom';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Route exact path=\"/\">\n      <Contents></Contents>\n      </Route>\n      <Route path=\"/word\">\n      <Word></Word>\n      </Route>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n    <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}